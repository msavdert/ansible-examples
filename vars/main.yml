---
## NTP ##
ntp_enabled: true # or 'false' if you don't want to install and configure the ntp service
# NTP server area configuration (leave empty for 'Worldwide').
# See: http://support.ntp.org/bin/view/Servers/NTPPoolServers
ntp_area: ""
ntp_servers:
  - "0{{ '.' + ntp_area if ntp_area else '' }}.pool.ntp.org iburst"
  - "1{{ '.' + ntp_area if ntp_area else '' }}.pool.ntp.org iburst"
  - "2{{ '.' + ntp_area if ntp_area else '' }}.pool.ntp.org iburst"
  - "3{{ '.' + ntp_area if ntp_area else '' }}.pool.ntp.org iburst"
#  - "10.128.64.44"
#  - "10.128.64.45"

## TIMEZONE ##
# timezone: ""
# timezone: "Etc/UTC"
timezone: "America/New_York"
# timezone: "Europe/Moscow"
# timezone: "Europe/Berlin"

## ETC_HOSTS ##
# /etc/hosts (optional)
etc_hosts: []
#  - "10.128.64.143 pgbackrest.minio.local minio.local s3.eu-west-3.amazonaws.com"  # example (MinIO)
#  - ""

## ADD-REPOSITORY ##
install_epel_repo: true # or 'false' (installed from the package "epel-release-latest.noarch.rpm")
install_postgresql_repo: true # or 'false' (installed from the package "pgdg-redhat-repo-latest.noarch.rpm")

## PACKAGES ##
# Packages (for yum repo)
python_version: "3.12"

os_specific_packages:
  RedHat-7:
    - python
    - python-devel
    - python-psycopg2
    - python-setuptools
    - libselinux-python
    - libsemanage-python
    - policycoreutils-python
    - yum-utils
  RedHat-8:
    - python2
    - python3-libselinux
    - python3-libsemanage
    - python3-policycoreutils
    - dnf-utils
  RedHat-9:
    - python3-libselinux
    - python3-libsemanage
    - python3-policycoreutils
    - dnf-utils
system_packages:
  - "{{ os_specific_packages[ansible_os_family ~ '-' ~ ansible_distribution_major_version] }}"
  - python{{ python_version }}
  - python{{ python_version }}-devel
  - python{{ python_version }}-psycopg2
  - python{{ python_version }}-setuptools
  - python{{ python_version }}-pip
  - python{{ python_version }}-urllib3
  - less
  - sudo
  - vim
  - gcc
  - jq
  - iptables
  - acl
  - bind-utils

# The glibc-langpack package includes the basic information required to support the language in your applications.
# for RHEL version 8 (only)
glibc_langpack:
  - "glibc-langpack-en"
#  - "glibc-langpack-ru"
#  - "glibc-langpack-de"

postgresql_packages:
  - postgresql{{ postgresql_version }}
  - postgresql{{ postgresql_version }}-server
  - postgresql{{ postgresql_version }}-contrib
#  - postgresql{{ postgresql_version }}-devel
#  - pg_repack_{{ postgresql_version }}
#  - pg_cron_{{ postgresql_version }}
#  - pg_stat_kcache_{{ postgresql_version }}
#  - pg_wait_sampling_{{ postgresql_version }}
#  - postgis33_{{ postgresql_version }}
#  - pgrouting_{{ postgresql_version }}
#  - pgvector_{{ postgresql_version }}
#  - pgaudit17_{{ postgresql_version }}

## POSTGRESQL ##
postgresql_version: "16"
# You can specify custom data dir path. Example: "/pgdata/{{ postgresql_version }}/data"
postgresql_data_dir: "/var/lib/pgsql/{{ postgresql_version }}/data"
# You can specify custom WAL dir path. Example: "/pgwal/{{ postgresql_version }}/pg_wal"
postgresql_wal_dir: "" # if defined, symlink will be created [optional]
postgresql_conf_dir: "{{ postgresql_data_dir }}"
postgresql_bin_dir: "/usr/pgsql-{{ postgresql_version }}/bin"
postgresql_log_dir: "/var/log/postgresql"
postgresql_unix_socket_dir: "/var/run/postgresql"
postgresql_home_dir: "/var/lib/pgsql"

# stats_temp_directory (mount the statistics directory in tmpfs)
# if postgresql_version < 15
postgresql_stats_temp_directory_path: "/var/lib/pgsql_stats_tmp" # or 'none'
postgresql_stats_temp_directory_size: "1024m"
# postgresql_data_dir: see vars/Debian.yml or vars/RedHat.yml
postgresql_listen_addr: "0.0.0.0" # Listen on all interfaces. Or use "{{ inventory_hostname }},127.0.0.1" to listen on a specific IP address.
postgresql_port: "5432"
postgresql_encoding: "UTF8" # for bootstrap only (initdb)
postgresql_locale: "en_US.UTF-8" # for bootstrap only (initdb)
postgresql_data_checksums: true # for bootstrap only (initdb)
postgresql_password_encryption_algorithm: "scram-sha-256" # or "md5" if your clients do not work with passwords encrypted with SCRAM-SHA-256

# (optional) list of users to be created (if not already exists)
postgresql_users:
  - {
      name: "{{ pgbouncer_auth_username }}",
      password: "{{ pgbouncer_auth_password }}",
      flags: "LOGIN",
      role: "",
    }
#  - { name: "monitoring_auth_username", password: "monitoring_user_password", flags: "LOGIN", role: "pg_monitor" } # monitoring Service Account
#  - { name: "mydb-user", password: "mydb-user-pass", flags: "SUPERUSER" }
#  - { name: "", password: "", flags: "NOSUPERUSER" }
#  - { name: "", password: "", flags: "NOSUPERUSER" }
#  - { name: "", password: "", flags: "NOLOGIN" }

# (optional) list of databases to be created (if not already exists)
postgresql_databases: []
#  - { db: "mydatabase", encoding: "UTF8", lc_collate: "ru_RU.UTF-8", lc_ctype: "ru_RU.UTF-8", owner: "mydb-user" }
#  - { db: "mydatabase2", encoding: "UTF8", lc_collate: "ru_RU.UTF-8", lc_ctype: "ru_RU.UTF-8", owner: "mydb-user", conn_limit: "50" }
#  - { db: "", encoding: "UTF8", lc_collate: "en_US.UTF-8", lc_ctype: "en_US.UTF-8", owner: "" }
#  - { db: "", encoding: "UTF8", lc_collate: "en_US.UTF-8", lc_ctype: "en_US.UTF-8", owner: "" }

# (optional) list of schemas to be created (if not already exists)
postgresql_schemas: []
#  - { schema: "myschema", db: "mydatabase", owner: "mydb-user" }

# (optional) list of database extensions to be created (if not already exists)
postgresql_extensions: []
#  - { ext: "pg_stat_statements", db: "postgres" }
#  - { ext: "pg_stat_statements", db: "mydatabase" }
#  - { ext: "pg_stat_statements", db: "mydatabase", schema: "myschema" }
#  - { ext: "pg_stat_statements", db: "" }
#  - { ext: "pg_stat_statements", db: "" }
#  - { ext: "pg_repack", db: "" }  # postgresql-<version>-repack package is required
#  - { ext: "pg_stat_kcache", db: "" }  # postgresql-<version>-pg-stat-kcache package is required
#  - { ext: "", db: "" }
#  - { ext: "", db: "" }

# postgresql parameters to bootstrap dcs (are parameters for example)
postgresql_parameters:
  - { option: "max_connections", value: "500" }
  - { option: "superuser_reserved_connections", value: "5" }
  - {
      option: "password_encryption",
      value: "{{ postgresql_password_encryption_algorithm }}",
    }
  - { option: "max_locks_per_transaction", value: "512" }
  - { option: "max_prepared_transactions", value: "0" }
  - { option: "huge_pages", value: "try" } # or "on" if you set "vm_nr_hugepages" in kernel parameters
  - {
      option: "shared_buffers",
      value: "{{ (ansible_memtotal_mb * 0.25) | int }}MB",
    } # by default, 25% of RAM
  - {
      option: "effective_cache_size",
      value: "{{ (ansible_memtotal_mb * 0.75) | int }}MB",
    } # by default, 75% of RAM
  - { option: "work_mem", value: "128MB" } # please change this value
  - { option: "maintenance_work_mem", value: "256MB" } # please change this value
  - { option: "checkpoint_timeout", value: "15min" }
  - { option: "checkpoint_completion_target", value: "0.9" }
  - { option: "min_wal_size", value: "2GB" }
  - { option: "max_wal_size", value: "8GB" } # or 16GB/32GB
  - { option: "wal_buffers", value: "32MB" }
  - { option: "default_statistics_target", value: "1000" }
  - { option: "seq_page_cost", value: "1" }
  - { option: "random_page_cost", value: "1.1" } # or "4" for HDDs with slower random access
  - { option: "effective_io_concurrency", value: "200" } # or "2" for traditional HDDs with lower I/O parallelism
  - { option: "synchronous_commit", value: "on" } # or 'off' if you can you lose single transactions in case of a crash
  - { option: "autovacuum", value: "on" } # never turn off the autovacuum!
  - { option: "autovacuum_max_workers", value: "5" }
  - { option: "autovacuum_vacuum_scale_factor", value: "0.01" } # or 0.005/0.001
  - { option: "autovacuum_analyze_scale_factor", value: "0.01" }
  - { option: "autovacuum_vacuum_cost_limit", value: "500" } # or 1000/5000
  - { option: "autovacuum_vacuum_cost_delay", value: "2" }
  - { option: "autovacuum_naptime", value: "1s" }
  - { option: "max_files_per_process", value: "4096" }
  - { option: "archive_mode", value: "on" }
  - { option: "archive_timeout", value: "1800s" }
  - { option: "archive_command", value: "cd ." } # not doing anything yet with WAL-s
  #  - { option: "archive_command", value: "{{ wal_g_archive_command }}" }  # archive WAL-s using WAL-G
  #  - { option: "archive_command", value: "{{ pgbackrest_archive_command }}" }  # archive WAL-s using pgbackrest
  - { option: "wal_level", value: "logical" }
  - { option: "wal_keep_size", value: "2GB" }
  - { option: "max_wal_senders", value: "10" }
  - { option: "max_replication_slots", value: "10" }
  - { option: "hot_standby", value: "on" }
  - { option: "wal_log_hints", value: "on" }
  - { option: "wal_compression", value: "on" }
  - {
      option: "shared_preload_libraries",
      value: "pg_stat_statements,auto_explain",
    }
  - { option: "pg_stat_statements.max", value: "10000" }
  - { option: "pg_stat_statements.track", value: "all" }
  - { option: "pg_stat_statements.track_utility", value: "false" }
  - { option: "pg_stat_statements.save", value: "true" }
  - { option: "auto_explain.log_min_duration", value: "10s" } # enable auto_explain for 10-second logging threshold. Decrease this value if necessary
  - { option: "auto_explain.log_analyze", value: "true" }
  - { option: "auto_explain.log_buffers", value: "true" }
  - { option: "auto_explain.log_timing", value: "false" }
  - { option: "auto_explain.log_triggers", value: "true" }
  - { option: "auto_explain.log_verbose", value: "true" }
  - { option: "auto_explain.log_nested_statements", value: "true" }
  - { option: "auto_explain.sample_rate", value: "0.01" } # enable auto_explain for 1% of queries logging threshold
  - { option: "track_io_timing", value: "on" }
  - { option: "log_lock_waits", value: "on" }
  - { option: "log_temp_files", value: "0" }
  - { option: "track_activities", value: "on" }
  - { option: "track_activity_query_size", value: "4096" }
  - { option: "track_counts", value: "on" }
  - { option: "track_functions", value: "all" }
  - { option: "log_checkpoints", value: "on" }
  - { option: "logging_collector", value: "on" }
  - { option: "log_truncate_on_rotation", value: "on" }
  - { option: "log_rotation_age", value: "1d" }
  - { option: "log_rotation_size", value: "0" }
  - { option: "log_line_prefix", value: "'%t [%p-%l] %r %q%u@%d '" }
  - { option: "log_filename", value: "postgresql-%a.log" }
  - { option: "log_directory", value: "{{ postgresql_log_dir }}" }
  - { option: "hot_standby_feedback", value: "on" } # allows feedback from a hot standby to the primary that will avoid query conflicts
  - { option: "max_standby_streaming_delay", value: "30s" }
  - { option: "wal_receiver_status_interval", value: "10s" }
  - { option: "idle_in_transaction_session_timeout", value: "10min" } # reduce this timeout if possible
  - { option: "jit", value: "off" }
  - { option: "max_worker_processes", value: "24" }
  - { option: "max_parallel_workers", value: "8" }
  - { option: "max_parallel_workers_per_gather", value: "2" }
  - { option: "max_parallel_maintenance_workers", value: "2" }
  - { option: "tcp_keepalives_count", value: "10" }
  - { option: "tcp_keepalives_idle", value: "300" }
  - { option: "tcp_keepalives_interval", value: "30" }
#  - { option: "old_snapshot_threshold", value: "60min" }
#  - { option: "", value: "" }
#  - { option: "", value: "" }

# Set this variable to 'true' if you want the cluster to be automatically restarted
# after changing the 'postgresql_parameters' variable that requires a restart in the 'config_pgcluster.yml' playbook.
# By default, the cluster will not be automatically restarted.
pending_restart: false

# specify additional hosts that will be added to the pg_hba.conf
postgresql_pg_hba:
  - {
      type: "local",
      database: "all",
      user: "{{ patroni_superuser_username }}",
      address: "",
      method: "trust",
    }
  - {
      type: "local",
      database: "all",
      user: "{{ pgbouncer_auth_username }}",
      address: "",
      method: "trust",
    } # required for pgbouncer auth_user
  - {
      type: "local",
      database: "replication",
      user: "{{ patroni_superuser_username }}",
      address: "",
      method: "trust",
    }
  - {
      type: "local",
      database: "all",
      user: "all",
      address: "",
      method: "{{ postgresql_password_encryption_algorithm }}",
    }
  - {
      type: "host",
      database: "all",
      user: "all",
      address: "127.0.0.1/32",
      method: "{{ postgresql_password_encryption_algorithm }}",
    }
  - {
      type: "host",
      database: "all",
      user: "all",
      address: "::1/128",
      method: "{{ postgresql_password_encryption_algorithm }}",
    }
#  - { type: "host", database: "mydatabase", user: "mydb-user", address: "192.168.0.0/24", method: "{{ postgresql_password_encryption_algorithm }}" }
#  - { type: "host", database: "all", user: "all", address: "192.168.0.0/24", method: "ident", options: "map=main" }  # use pg_ident

# list of lines that Patroni will use to generate pg_ident.conf
postgresql_pg_ident: []
#  - { mapname: "main", system_username: "postgres", pg_username: "backup" }
#  - { mapname: "", system_username: "", pg_username: "" }

# the password file (~/.pgpass)
postgresql_pgpass:
  - "localhost:{{ postgresql_port }}:*:{{ patroni_superuser_username }}:{{ patroni_superuser_password }}"
  - "{{ inventory_hostname }}:{{ postgresql_port }}:*:{{ patroni_superuser_username }}:{{ patroni_superuser_password }}"
  - "*:{{ pgbouncer_listen_port }}:*:{{ patroni_superuser_username }}:{{ patroni_superuser_password }}"
#  - hostname:port:database:username:password
