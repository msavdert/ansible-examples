---
- block: # RedHat (update cache)
    - name: Update yum cache
      ansible.builtin.shell: yum clean all && yum -y makecache
      args:
        executable: /bin/bash
      when: ansible_distribution_major_version == '7'

    - name: Update dnf cache
      ansible.builtin.shell: dnf clean all && dnf -y makecache
      args:
        executable: /bin/bash
      when: ansible_distribution_major_version >= '8'
  when: ansible_os_family == "RedHat"
  tags: install_packages, install_postgres

# Install packages from repository
# RedHat
- name: Install system packages
  ansible.builtin.yum:
    name: "{{ item }}"
    state: present
    disablerepo: "pgdg*"
  loop: "{{ system_packages }}"
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == '7'
  tags: install_packages

- name: Install system packages
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: present
    disablerepo: "pgdg*"
  loop: "{{ system_packages }}"
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version >= '8'
  tags: install_packages

- name: Set Python alternative
  community.general.alternatives:
    name: python3
    path: /usr/bin/python{{ python_version }}
    link: /usr/bin/python3
    priority: 1100
    state: selected
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version >= '8'
    - python_version | default('') | length > 1
  tags: install_packages

# Debian
- name: Install system packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop: "{{ system_packages }}"
  register: apt_status
  until: apt_status is success
  delay: 5
  retries: 3
  when: ansible_os_family == "Debian"
  tags: install_packages

# PostgreSQL prepare for install (for Debian based only)
- block:
    - name: PostgreSQL | ensure postgresql database-cluster manager package
      ansible.builtin.package:
        name: postgresql-common
        state: present
      register: package_status
      until: package_status is success
      delay: 5
      retries: 3

    - name: PostgreSQL | disable initializing of a default postgresql cluster
      ansible.builtin.replace:
        path: /etc/postgresql-common/createcluster.conf
        replace: create_main_cluster = false
        regexp: ^#?create_main_cluster.*$

    - name: PostgreSQL | disable log rotation with logrotate for postgresql
      ansible.builtin.file:
        dest: /etc/logrotate.d/postgresql-common
        state: absent
  when: ansible_os_family == "Debian"
  tags: install_postgres

# PostgreSQL prepare for install (for RHEL)
- block:
    - name: PostgreSQL | check if appstream module is enabled
      ansible.builtin.command: "dnf -y -C module list postgresql"
      register: postgresql_module_result
      changed_when: false

    - name: PostgreSQL | disable appstream module
      ansible.builtin.command: "dnf -y -C module disable postgresql"
      when: "'[x] ' not in postgresql_module_result.stdout"
  when: ansible_os_family == "RedHat" and
    ansible_distribution_major_version >= '8'
  ignore_errors: true
  tags: install_postgres

# Install PostgreSQL from repository
# RedHat
- name: Install PostgreSQL packages
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ postgresql_packages }}"
  register: package_status
  until: package_status is success
  delay: 5
  retries: 3
  when: ansible_os_family == "RedHat"
  tags: install_packages, install_postgres

# Debian
- name: Install PostgreSQL packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: present
  loop: "{{ postgresql_packages }}"
  register: apt_status
  until: apt_status is success
  delay: 5
  retries: 3
  when: ansible_os_family == "Debian"
  tags: install_packages, install_postgres
